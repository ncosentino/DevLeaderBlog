@using System.Text
@using Markdig
@using LinkDotNet.Blog.Domain
@using LinkDotNet.Blog.Infrastructure.Persistence
@using LinkDotNet.Blog.Web.Features.Services
@using LinkDotNet.Blog.Web.Features.ShowBlogPost.Components
@using LinkDotNet.Blog.Web.Features.SupportMe.Components
@inject IRepository<BlogPost> BlogPostRepository
@inject IRepository<ShortCode> ShortCodeRepository
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IUserRecordService UserRecordService
@inject IOptions<ApplicationConfiguration> AppConfiguration
@inject IOptions<ProfileInformation> ProfileInformation
@inject IOptions<SupportMeConfiguration> SupportConfiguration
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>@BlogPost.Title</PageTitle>
<OgData
Title="@BlogPost.Title"
AbsolutePreviewImageUrl="@OgDataImage"
Description="@(Markdown.ToPlainText(BlogPost.ShortDescription))"
Keywords="@BlogPost.TagsAsString"
CanonicalRelativeUrl="@BlogPostCanonicalUrl">
    <StructuredData
    Headline="@BlogPost.Title"
    PreviewImage="@BlogPost.PreviewImageUrl"
    PreviewFallbackImage="@BlogPost.PreviewImageUrlFallback"
    PublishedDate="@BlogPost.UpdatedDate"
    Author="@ProfileInformation.Value.Name"/>
</OgData>

<div class="d-flex justify-content-center pt-2 blog-outer-box">
    <div class="blog-container">
        @if (hasPermission == true)
        {
            <div class="blog-inner-content">
                <header class="text-center">
                    <h1 class="fw-bold">@BlogPost.Title</h1>
                </header>
                <div class="text-dark-emphasis d-flex flex-wrap gap-2">
                    <div class="me-2">
                        <span class="date"></span>
                        <span class="ms-1">@BlogPost.UpdatedDate.ToShortDateString()</span>
                    </div>
                    @if (BlogPost.Tags is not null && BlogPost.Tags.Any())
                    {
                        <div class="d-flex align-items-center">
                            <span class="blogpost-tag me-2"></span>
                            <div class="d-flex flex-wrap gap-2">
                                @foreach (var tag in BlogPost.Tags)
                                {
                                    <a class="goto-tag badge bg-primary rounded-pill text-decoration-none" href="/searchByTag/@(Uri.EscapeDataString(tag))">@tag</a>
                                }
                            </div>
                        </div>
                    }
                </div>

                <div class="pt-2">
                    <BlogPostAdminActions BlogPostId="@BlogPost.Id"></BlogPostAdminActions>
                </div>

                <div class="pt-2">
                    <TableOfContents Content="@BlogPost.Content" CurrentUri="@NavigationManager.Uri"></TableOfContents>
                </div>

                <div class="blogpost-content">
                    @(EnrichWithShortCodes(BlogPost.Content))
                </div>
            </div>
        }
        else if (hasPermission == false)
        {
            <div class="alert alert-warning text-center" role="alert">
                <h1 class="fs-3">This content is only available for members.</h1>
            </div>

            <!-- FIXME: Make this cooler by having it configurable from the db or settings -->
            <div style="text-align: center;">
                <iframe width="350" height="500" src="https://weekly.devleader.ca/embed" frameborder="0" scrolling="no" ></iframe>
            </div>
        }

        <div class="d-flex justify-content-between py-2 border-top border-bottom align-items-center">
            <Like BlogPost="@BlogPost" OnBlogPostLiked="@UpdateLikes"></Like>
            <ShareBlogPost></ShareBlogPost>
        </div>

        @if (SupportConfiguration.Value.ShowUnderBlogPost)
        {
            <DonationSection />
        }

        @if (AppConfiguration.Value.ShowSimilarPosts)
        {
            <SimilarBlogPostSection BlogPost="@BlogPost" />
        }

        @if (hasPermission == true)
        {
            <CommentSection></CommentSection>
        }

        @if (AppConfiguration.Value.ShowReadingIndicator)
        {
            <ReadingIndicator ContainerCssSelector=".blog-inner-content"/>
        }
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public required BlogPost BlogPost { get; set; }

    [Parameter, EditorRequired]
    public required string BlogPostCanonicalUrl { get; set; }

    private string OgDataImage => BlogPost!.PreviewImageUrlFallback ?? BlogPost.PreviewImageUrl;
    private IReadOnlyCollection<ShortCode> shortCodes = [];
    private bool? hasPermission; // tri-state to avoid flickering on load

    protected override async Task OnInitializedAsync()
    {
        shortCodes = await ShortCodeRepository.GetAllAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (BlogPost?.IsMembersOnly ?? false)
        {
            var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            hasPermission = state.User.IsInRole("Admin") || state.User.IsInRole("Member");
        }
        else
        {
            hasPermission = true;
        }

        await base.OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeVoidAsync("hljs.highlightAll");
        _ = UserRecordService.StoreUserRecordAsync();
    }

    private MarkupString EnrichWithShortCodes(string content)
	{
		if (shortCodes.Count == 0)
		{
			return MarkdownConverter.ToMarkupString(content);
		}

		var sb = new StringBuilder(content);
		foreach (var shortCode in shortCodes)
		{
			sb.Replace($"[[{shortCode.Name}]]", shortCode.MarkdownContent);
		}

		return MarkdownConverter.ToMarkupString(sb.ToString());
	}

    private async Task UpdateLikes(bool hasLiked)
    {
        BlogPost = await BlogPostRepository.GetByIdAsync(BlogPost!.Id)
                   ?? throw new InvalidOperationException("Blog post not found");
        BlogPost.Likes = hasLiked ? BlogPost.Likes + 1 : BlogPost.Likes - 1;
        await BlogPostRepository.StoreAsync(BlogPost);
    }
}
